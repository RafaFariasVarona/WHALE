/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    withName: FASTQC {
        ext.args = '--quiet'
    }

    withName: MINIMAP2_ALIGN {
        publishDir = [
            path: { "${params.outdir}/alignment" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: FILTER_PASS {
        ext.args = "--apply-filters PASS"
        publishDir = [
            path: { "${params.outdir}/snv_calling" },
            mode: params.publish_dir_mode,
            pattern: "*_{deepvariant,clair3,nanocaller}*",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: FILTER_QUAL {
        ext.args = "--include 'QUAL >= 10'"
    }

    withName: CLAIR3 {
        ext.args = {"--platform=ont --model_path=/usr/local/bin/models/ont"} // options: {ont,hifi,ilmn}
    }

    withName: NANOCALLER {
        ext.args = '--preset ont' // options: {ont,ul_ont,ul_ont_extreme,ccs,clr}
    }

    withName: DEEPVARIANT {
        ext.args = '--model_type=ONT_R104' // options: {WGS,WES,PACBIO,ONT_R104,HYBRID_PACBIO_ILLUMINA}
    }

    withName: BCFTOOLS_MERGE {
        ext.args = {"-m none -Oz"}
        ext.prefix = { "${meta.id}_merged_snvs" }
    }
    
    withName: BCFTOOLS_NORM {
        ext.args = {"-m - -c s"}
        ext.prefix = { vcf.baseName - '.vcf' - '.gz' + '_biallelic' }
    }

    withName: BCFTOOLS_VIEW {
        ext.args = {"--min-ac=1 -Oz"}
        ext.prefix = { vcf.baseName - '.vcf' - '.gz' + '_minac' }
    }

    withName: BCFTOOLS_SORT {
        ext.prefix = { vcf.baseName - '.vcf' - '.gz' + '_sorted' }
        publishDir = [
            path: { "${params.outdir}/sv_calling" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'MULTIQC' {
        ext.args   = { params.multiqc_title ? "--title \"$params.multiqc_title\"" : '' }
        publishDir = [
            path: { "${params.outdir}/multiqc" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: CUTESV {
        ext.args = {"--max_cluster_bias_INS	100 --diff_ratio_merging_INS 0.3 --max_cluster_bias_DEL 100 --diff_ratio_merging_DEL 0.3"}
    }

    withName: HEADER_VARIANTS_VCF {
        publishDir = [
            path: { "${params.outdir}/snv_calling/snv_merge" },
            mode: params.publish_dir_mode,
            pattern: "*final.vcf",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: POSTMERGE {
        publishDir = [
            path: { "${params.outdir}/sv_calling/sv_merge" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: SV_SAMPLES {
        publishDir = [
            path: { "${params.outdir}/sv_annotation/overlapping_sv_samples" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: ANNOTSV_ANNOTSV {
        ext.args = "-svtBEDcol 5 -samplesidBEDcol 26"
        publishDir = [
            path: { "${params.outdir}/sv_annotation" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: ENSEMBLVEP_VEP {
        ext.prefix = { vcf.baseName - '.vcf' + '-vep' }
        ext.args = { ["--refseq --check_existing --canonical --numbers --hgvs --biotype --regulatory --symbol --protein --sift p --polyphen p --allele_number --variant_class --pubmed --force_overwrite --use_transcript_ref",  
        "--tab",
        "--plugin LoFtool,LoFtool_scores.txt",
        "--plugin dbscSNV,${params.dbscSNV}",
        "--plugin pLI,${params.exACpLI}",
        "--plugin dbNSFP,${params.dbNSFP},\
LRT_pred,M-CAP_pred,MetaLR_pred,MetaSVM_pred,MutationAssessor_pred,MutationTaster_pred,PROVEAN_pred,\
FATHMM_pred,MetaRNN_pred,PrimateAI_pred,DEOGEN2_pred,BayesDel_addAF_pred,BayesDel_noAF_pred,ClinPred_pred,\
LIST-S2_pred,Aloft_pred,fathmm-MKL_coding_pred,fathmm-XF_coding_pred,Polyphen2_HDIV_pred,Polyphen2_HVAR_pred,\
phyloP470way_mammalian,phastCons470way_mammalian,GERP++_RS,Interpro_domain,GTEx_V8_eQTL_gene,GTEx_V8_eQTL_tissue", 
        "--plugin MaxEntScan,${params.maxEntScan}",
        "--plugin CADD,${params.cADD_INDELS},${params.cADD_SNVS}",
        "--custom ${params.kaviar},kaviar,vcf,exact,0,AF,AC,AN",
        "--custom ${params.cCRS_DB},gnomAD_exomes_CCR,bed,overlap,0",
        "--custom ${params.dENOVO_DB},denovoVariants,vcf,exact,0,SAMPLE_CT",
        "--custom ${params.cLINVAR},ClinVar,vcf,exact,0,CLNSIG,CLNREVSTAT,CLNDN,CLNSIGCONF",
        "--custom ${params.gNOMADg},gnomADg,vcf,exact,0,AF,AC,AN,nhomalt,grpmax,AF_grpmax,AC_grpmax,AF_nfe,AC_nfe,filt",
        "--custom ${params.gNOMADe},gnomADe,vcf,exact,0,AF,AC,AN,nhomalt,grpmax,AF_grpmax,AC_grpmax,AF_nfe,AC_nfe,filt",
        "--custom ${params.gNOMADg_cov},gnomADg_cov,vcf,overlap,0,median,perc_20x",
        "--custom ${params.gNOMADe_cov},gnomADe_cov,vcf,overlap,0,median,perc_20x",
        "--custom ${params.mutScore},Mut,vcf,exact,0,Score",
        "--custom ${params.cSVS},CSVS,vcf,exact,0,AF,AC",
        "--custom ${params.mAF_FJD_COHORT},FJD_MAF,vcf,exact,0,AF,AC,AF_DS_irdt,AC_DS_irdt,AF_P_eyeg,AC_P_eyeg",
        "--custom ${params.spliceAI_SNV},SpliceAI_SNV,vcf,exact,0,SpliceAI",
        "--custom ${params.spliceAI_INDEL},SpliceAI_INDEL,vcf,exact,0,SpliceAI",
        "--custom ${params.REVEL},REVEL,vcf,exact,0,Score",
        "--custom ${meta.id}.vcf_to_annotate.vcf.gz,SAMPLE,vcf,exact,0\$(cat ${meta.id}.fields.txt)"
        ].join(' ').trim()
        }
    }

    withName: POSTVEP {
        publishDir = [
            path: { "${params.outdir}/snv_annotation" },
            mode: params.publish_dir_mode,
            pattern: "*.xlsx",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: MERGETSV {
        publishDir = [
            path: { "${params.outdir}/snv_annotation" },
            mode: params.publish_dir_mode,
            pattern: "*final.tsv",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}

