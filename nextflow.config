/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    nf-core/variantpipeline Nextflow config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Default config options for all compute environments
----------------------------------------------------------------------------------------
*/

// Global default params, used in configs
params {

    // Input options
    input                      = null
    step                       = null
    
    // References
    genome                     = null
    igenomes_base              = 's3://ngi-igenomes/igenomes/'
    igenomes_ignore            = true
    fasta                      = null
    fasta_fai                  = null
    fasta_gzi                  = null
    assembly                   = null


    // VEP
    // VEP_Cache
    vep_cache_version          = 112
    vep_species                = 'homo_sapiens'
    vep_genome                 = 'GRCh38'
    vep_cache                  = null

    // VEP_Pluggins
    vep_annotation_dir            = null
    vep_annotation_gene_dir       = null
    dbscSNV                    = 'dbscSNV1.1_GRCh38.txt.gz'
    dbscSNV_tbi                = 'dbscSNV1.1_GRCh38.txt.gz.tbi'
    loFtool                    = 'LoFtool_scores.txt'
    exACpLI                    = 'pLI_values.txt'
    dbNSFP                     = 'dbNSFP4.9a_grch38.gz'
    dbNSFP_tbi                     = 'dbNSFP4.9a_grch38.gz.tbi'
    maxEntScan                 = 'maxEntScan'
    cADD_INDELS                = 'CADD_v1.7_hg38_gnomad.genomes.r4.0.indel.tsv.gz'
    cADD_INDELS_tbi                = 'CADD_v1.7_hg38_gnomad.genomes.r4.0.indel.tsv.gz.tbi'
    cADD_SNVS                  = 'CADD_v1.7_hg38_whole_genome_SNVs.tsv.gz'
    cADD_SNVS_tbi                  = 'CADD_v1.7_hg38_whole_genome_SNVs.tsv.gz.tbi'

    // VEP_custom

    kaviar                     = 'Kaviar-160204-Public-hg38.vcf.gz'
    kaviar_tbi                 = 'Kaviar-160204-Public-hg38.vcf.gz.tbi' 
    mAF_FJD_COHORT             = 'MAFdb_AN20_2024_06_26.vcf.gz'
    mAF_FJD_COHORT_tbi         = 'MAFdb_AN20_2024_06_26.vcf.gz.tbi'
    cCRS_DB            = "ccrs.all.v2.20180420.hg38.bed.gz"
	cCRS_DB_tbi        = "ccrs.all.v2.20180420.hg38.bed.gz.tbi"
	cLINVAR            = "clinvar.GRCh38.vcf.gz"
	cLINVAR_tbi        = "/clinvar.GRCh38.vcf.gz.tbi"
	dENOVO_DB          = "denovo-db.non-ssc-samples.variants.hg38.chr.vcf.gz"
	dENOVO_DB_tbi      = "denovo-db.non-ssc-samples.variants.hg38.chr.vcf.gz.tbi"
	gNOMADe_cov        = "gnomad.exomes.v4.0.coverage.hg38.positions.vcf.gz"
	gNOMADe_cov_tbi    = "gnomad.exomes.v4.0.coverage.hg38.positions.vcf.gz.tbi"
	gNOMADe            = "gnomad.exomes.v4.1.sites.okannotfilt.allchr.vcf.gz"
	gNOMADe_tbi        = "gnomad.exomes.v4.1.sites.okannotfilt.allchr.vcf.gz.tbi"
	gNOMADg_cov        = "gnomad.genomes.v3.0.1.coverage.hg38.positions.vcf.gz"
	gNOMADg_cov_tbi    = "gnomad.genomes.v3.0.1.coverage.hg38.positions.vcf.gz.tbi"		
	gNOMADg            = "gnomad.genomes.v4.1.sites.okannotfilt.allchr.vcf.gz"
	gNOMADg_tbi        = "gnomad.genomes.v4.1.sites.okannotfilt.allchr.vcf.gz.tbi"
	mutScore           = "mutscore-v1.0-hg38.vcf.gz"
	mutScore_tbi       = "mutscore-v1.0-hg38.vcf.gz.tbi"
	spliceAI_SNV       = "spliceai_scores.raw.snv.hg38.vcf.gz"
	spliceAI_SNV_tbi   = "spliceai_scores.raw.snv.hg38.vcf.gz.tbi"
	spliceAI_INDEL     = "spliceai_scores.raw.indel.hg38.vcf.gz"
	spliceAI_INDEL_tbi = "spliceai_scores.raw.indel.hg38.vcf.gz.tbi"
    CSVS_dir           = "CSVS_vcf_hg38"
	cSVS               = 'all.hg38.vcf.gz'
	cSVS_tbi           = 'all.hg38.vcf.gz.tbi'
	REVEL     	       = "revel_hg38_20210503.vcf.gz"
	REVEL_tbi 	       = "revel_hg38_20210503.vcf.gz.tbi" 

    // Variant calling
    snv_calling                = false
    snv_caller                 = null
    sv_calling                 = false
    sv_caller                  = null
    merge_snv                  = false
    merge_sv                   = false
    sv_database                = false
    sv_multiinter              = null

    // Annotation
    snv_annotation             = false
    sv_annotation              = false
    annotsv_annotations        = null
    gene_transcripts           = null

    // Singularity images
    singularity_dir            = null

    // MultiQC options
    multiqc_config             = null
    multiqc_title              = null
    multiqc_logo               = null
    max_multiqc_email_size     = '25.MB'
    multiqc_methods_description = null

    // Boilerplate options
    outdir                       = null
    publish_dir_mode             = 'copy'
    email                        = null
    email_on_fail                = null
    plaintext_email              = false
    monochrome_logs              = false
    hook_url                     = null
    help                         = false
    version                      = false
    pipelines_testdata_base_path = 'https://raw.githubusercontent.com/nf-core/test-datasets/'

    // Config options
    config_profile_name        = null
    config_profile_description = null
    custom_config_version      = 'master'
    custom_config_base         = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"
    config_profile_contact     = null
    config_profile_url         = null

    // Max resource options
    // Defaults only, expecting to be overwritten
    max_memory                 = '128.GB'
    max_cpus                   = 16
    max_time                   = '240.h'

    // Schema validation default options
    validationFailUnrecognisedParams = false
    validationLenientMode            = false
    validationSchemaIgnoreParams     = 'genomes,igenomes_base'
    validationShowHiddenParams       = false
    validate_params                  = true

}

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

// Load nf-core custom profiles from different Institutions
try {
    includeConfig "${params.custom_config_base}/nfcore_custom.config"
} catch (Exception e) {
    System.err.println("WARNING: Could not load nf-core/config profiles: ${params.custom_config_base}/nfcore_custom.config")
}

// Load nf-core/variantpipeline custom profiles from different institutions.
try {
    includeConfig "${params.custom_config_base}/pipeline/variantpipeline.config"
} catch (Exception e) {
    System.err.println("WARNING: Could not load nf-core/config/variantpipeline profiles: ${params.custom_config_base}/pipeline/variantpipeline.config")
}

profiles {

    tblabserver {
        params.fasta            = '/mnt/genetica7/references_masked/hg38.fa.gz'
        params.fasta_fai        = '/mnt/genetica7/references_masked/hg38.fa.gz.fai'
        params.fasta_gzi        = '/mnt/genetica7/references_masked/hg38.fa.gz.gzi'
        params.assembly         = 'hg38'
        params.singularity_dir  = '/home/gonzalo/singularity_images/'
        params.vep_cache        = '/mnt/genetica5/vep_2024/'
        params.vep_annotation_dir            = '/mnt/genetica5/vep_plugins_hg38_2024/'
        params.vep_annotation_gene_dir       = '/mnt/genetica5/vep_plugins_gene_2024/'
    }
    
    tblabserver_allcontigs {
        params.fasta            = '/mnt/genetica7/references/hg38.fa.gz'
        params.fasta_fai        = '/mnt/genetica7/references/hg38.fa.gz.fai'
        params.fasta_gzi        = '/mnt/genetica7/references/hg38.fa.gz.gzi'
        params.assembly         = 'hg38'
        params.singularity_dir  = '/home/gonzalo/singularity_images/'
        params.vep_cache        = '/mnt/genetica5/vep_2024/'
    }
    
    snv_analysis {
        params.step             = 'mapping'
        params.snv_calling      = true
        params.snv_caller       = 'all'
        params.merge_snv        = true
        params.snv_annotation   = true
    }

    snv_calling {
        params.step             = 'variant_calling'
        params.snv_calling      = true
        params.snv_caller       = 'all'
        params.merge_snv        = true
    }

    snv_annotation {
        params.step             = 'snv_annotation'
        params.snv_annotation   = true
    }

    sv_analysis {
        params.step                = 'mapping'
        params.sv_calling          = true
        params.sv_caller           = 'all'
        params.merge_sv            = true
        params.sv_database         = true
        params.sv_multiinter       = '/mnt/genetica5/SVs_multiinter_files/*.bed'
        params.sv_annotation       = true
        params.annotsv_annotations = '/mnt/tblab/rafa/AnnotSV/share/AnnotSV'
        params.gene_transcripts    = '/mnt/tblab/rafa/AnnotSV/canonical_transcripts.txt'
    }

    sv_calling {
        params.step                = 'variant_calling'
        params.sv_calling          = true
        params.sv_caller           = 'all'
        params.merge_sv            = true
        params.sv_database         = true
        params.sv_multiinter       = '/mnt/genetica5/SVs_multiinter_files/*.bed'
    }

    sv_annotation {
        params.step                = 'sv_annotation'
        params.sv_annotation       = true
        params.annotsv_annotations = '/mnt/tblab/rafa/AnnotSV/share/AnnotSV'
        params.gene_transcripts    = '/mnt/tblab/rafa/AnnotSV/canonical_transcripts.txt'
    }

    debug {
        dumpHashes              = true
        process.beforeScript    = 'echo $HOSTNAME'
        cleanup                 = false
        nextflow.enable.configProcessNamesValidation = true
    }
    conda {
        conda.enabled           = true
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        conda.channels          = ['conda-forge', 'bioconda', 'defaults']
        apptainer.enabled       = false
    }
    mamba {
        conda.enabled           = true
        conda.useMamba          = true
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
    }
    docker {
        docker.enabled          = true
        conda.enabled           = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
        docker.runOptions       = '-u $(id -u):$(id -g)'
    }
    arm {
        docker.runOptions       = '-u $(id -u):$(id -g) --platform=linux/amd64'
    }
    singularity {
        singularity.enabled     = true
        singularity.autoMounts  = true
        conda.enabled           = false
        docker.enabled          = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
    }
    podman {
        podman.enabled          = true
        conda.enabled           = false
        docker.enabled          = false
        singularity.enabled     = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
    }
    shifter {
        shifter.enabled         = true
        conda.enabled           = false
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
    }
    charliecloud {
        charliecloud.enabled    = true
        conda.enabled           = false
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        apptainer.enabled       = false
    }
    apptainer {
        apptainer.enabled       = true
        apptainer.autoMounts    = true
        conda.enabled           = false
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
    }
    wave {
        apptainer.ociAutoPull   = true
        singularity.ociAutoPull = true
        wave.enabled            = true
        wave.freeze             = true
        wave.strategy           = 'conda,container'
    }
    gitpod {
        executor.name           = 'local'
        executor.cpus           = 4
        executor.memory         = 8.GB
    }
    test      { includeConfig 'conf/test.config'      }
    test_full { includeConfig 'conf/test_full.config' }
}

// Set default registry for Apptainer, Docker, Podman and Singularity independent of -profile
// Will not be used unless Apptainer / Docker / Podman / Singularity are enabled
// Set to your registry if you have a mirror of containers
apptainer.registry   = 'quay.io'
docker.registry      = 'quay.io'
podman.registry      = 'quay.io'
singularity.registry = 'quay.io'

// Nextflow plugins
plugins {
    id 'nf-validation@1.1.3' // Validation of pipeline parameters and creation of an input channel from a sample sheet
}

// Load igenomes.config if required
if (!params.igenomes_ignore) {
    includeConfig 'conf/igenomes.config'
} else {
    params.genomes = [:]
}
// Export these variables to prevent local Python/R libraries from conflicting with those in the container
// The JULIA depot path has been adjusted to a fixed path `/usr/local/share/julia` that needs to be used for packages in the container.
// See https://apeltzer.github.io/post/03-julia-lang-nextflow/ for details on that. Once we have a common agreement on where to keep Julia packages, this is adjustable.

env {
    PYTHONNOUSERSITE = 1
    R_PROFILE_USER   = "/.Rprofile"
    R_ENVIRON_USER   = "/.Renviron"
    JULIA_DEPOT_PATH = "/usr/local/share/julia"
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

// Disable process selector warnings by default. Use debug profile to enable warnings.
nextflow.enable.configProcessNamesValidation = false

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file    = "${params.outdir}/pipeline_info/pipeline_dag_${trace_timestamp}.html"
}

manifest {
    name            = 'nf-core/variantpipeline'
    author          = """rafa"""
    homePage        = 'https://github.com/nf-core/variantpipeline'
    description     = """variant calling pipeline"""
    mainScript      = 'main.nf'
    nextflowVersion = '!>=23.04.0'
    version         = '1.0dev'
    doi             = ''
}

// Load modules.config for DSL2 module specific options
includeConfig 'conf/modules.config'

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
